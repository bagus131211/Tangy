@page "/product"

@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime
@inject IFileUpload _uploadService

<_DeleteConfirmation IsParentLoading=@isLoading OnDeleteConfirmed=@DeleteConfirmed></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Products</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add new product</a>
    </div>
    <div class="col-12 py-4">
        @if (products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favourites</th>
                        <th>Customer Favourites</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in products)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td><input type="checkbox" disabled @bind=@item.ShopFavourites /></td>
                            <td><input type="checkbox" disabled @bind=@item.CustomerFavourites /></td>
                            <td>@item.Category.Name</td>
                            <td>
                                <NavLink href=@($"/product/edit/{item.Id}") class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)">Delete</button>
                                </td>

                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (isLoading)
            {
                <div class="text-center">
                    <img src="/images/gear.gif" />
                </div>
            }
            else
            {
                <p>No records found.</p>
            }
        }
    </div>
</div>

@code {
    IEnumerable<ProductDTO> products = new List<ProductDTO>();
    bool isLoading;
    int deletedId = 0;

    //protected override void OnInitialized()
    //    => categories = _categoryRepository.GetAll();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
        }
    } 

    async Task LoadProducts()
    {
        isLoading = true;
        StateHasChanged();
        products = await _productRepository.GetAll();
        isLoading = false;
        StateHasChanged();
    }

    void HandleDelete(int Id)
    {
        deletedId = Id;
        _jsRuntime.InvokeVoidAsync("showDeleteConfirmationModal");
    }

    async Task DeleteConfirmed(bool isConfirmed)
    {
        isLoading = true;
        if (isConfirmed && deletedId is not 0)
        {
            ProductDTO product = await _productRepository.GetById(deletedId);
            if(!product.ImageUri.Contains("default-image.jpg"))
            {
                await _uploadService.DeleteFile(product.ImageUri);
            }
            await _productRepository.Delete(deletedId);
            await _jsRuntime.ToastrSuccess("Product deleted successfully");
            await LoadProducts();
            await _jsRuntime.InvokeVoidAsync("hideDeleteConfirmationModal");
        }
        isLoading = false;
    }


}
