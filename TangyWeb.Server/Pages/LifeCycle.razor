@page "/lifeCycle"
@using System.Threading

<h3>LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />
<br />
@Timer <button @onclick=StartCountDown>Start Countdown</button>
<br />
<br />

<div class="border">
    <_LifeCycleChild CountValue=@currentCount></_LifeCycleChild>
</div>

@foreach (var item in EventType)
{
    @item
    <hr />
}

@code {
    int currentCount = 0;
    List<string> EventType = new();
    int Timer = 5;

    void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
        => EventType.Add("OnInitialized called");

    protected override async Task OnInitializedAsync()
        => EventType.Add("OnInitializedAsync called");

    protected override void OnParametersSet()
        => EventType.Add("OnParameterSet called");

    protected override async Task OnParametersSetAsync()
        => EventType.Add("OnParameterSetAsync called");

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            currentCount = 11;
        else
            currentCount = 99;
        EventType.Add("OnAfterRender called");
    } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
        => EventType.Add("OnAfterRenderAsync called");

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender called");
        return true;
    } 

    void TimeCallBack(object state)
    {
        if (Timer > 0)
        {
            Timer--;
            //it will not render the timer because it will not tell that timer state has change
            //InvokeAsync(StateHasChanged);
            InvokeAsync(StateHasChanged);
        }
    }

    void StartCountDown() => new Timer(TimeCallBack, null, 1000, 1000);
}