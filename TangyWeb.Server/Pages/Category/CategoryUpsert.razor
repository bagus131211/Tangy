@page "/category/create"
@page "/category/edit/{id:int}"

@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigation

@attribute [Authorize]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ms-lg-3">@Title Category</h3>
    @if (isLoading)
    {
        <div class="text-center">
            <img src="/images/gear.gif" />
        </div>
    }
    else
    {
        <div class="col-6">
            <EditForm Model=@category OnValidSubmit=@UpsertCategory>
                <DataAnnotationsValidator />
                @*to summaries error message on the above (As paragraph)
                    <ValidationSummary />*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value=@category.Name class="form-control"></InputText>
                    <ValidationMessage For="()=>category.Name"></ValidationMessage>
                </div>
                <div class="form-group py-4">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to index</NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>
@code {
    CategoryDTO category = new();
    string Title = "Create";
    bool isLoading;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id is 0)
                isLoading = false;
            else
            {
                Title = "Edit";
                await LoadCategory();
            }
        }
    }

    async Task LoadCategory()
    {
        isLoading = true;
        StateHasChanged();
        category = await _categoryRepository.GetById(Id);
        isLoading = false;
        StateHasChanged();
    }

    async Task UpsertCategory()
    {
        if (category.Id == 0)
        {
            await _categoryRepository.Create(category);   
        }
        else
        {
            await _categoryRepository.Update(category);
        }
        _navigation.NavigateTo("category");
    }
}
